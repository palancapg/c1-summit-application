{"version":3,"sources":["components/Header.js","components/Footer.js","components/Pagination.js","components/Movies.js","components/MoviesSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","alt","Footer","props","Pagination","movies","desiredPage","offset","slice","Movies","pages","currentPage","currentPageSetter","useState","movieDetails","setMovieDetails","callAPI","specificMovie","a","process","URL","fetch","response","json","console","log","undefined","document","getElementById","classList","toggle","alert","map","movie","Poster","id","imdbID","Title","Year","onClick","length","number","href","data-close-button","Released","Runtime","Genre","Director","MoviesSearch","query","setQuery","showMovies","setShowMovies","setMovies","setPages","setCurrentPage","totalPages","totalResults","allMovies","onSubmit","e","page","API_KEY","Search","forEach","Type","push","index","Math","ceil","preventDefault","fetchMyAPI","value","onChange","target","required","App","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5beb8093.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\n/**\n * \n *  File        : Header.js\n * \n *  Description : This component of the application creates the object that is used as the header in the web application.\n *                This component is imported into App.js.\n *\n *  Author      : Phillip Palanca \n * \n *  @returns    Object structure shown on web application's header  \n * \n */\n\nfunction Header() { \n    return(\n        <div className=\"header\">\n            <img className=\"header-Image\" src=\"./images/headerImage.png\" alt=\"Sunny Day Movie Search\"></img>    \n         </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.css';\n\n/**\n * \n *  File        : Footer.js\n * \n *  Description : This component of the application creates the object that is used as the footer in the web application.\n *                This component is imported into App.js.\n *\n *  Author      : Phillip Palanca \n * \n *  @returns    Object structure shown on web application's footer\n * \n */\n\nfunction Footer(props) { \n    return(\n        <div className=\"footer\">\n            <img className=\"footer-Image\" src=\"./images/footerImage.png\" alt=\"Sunny Day Movie Search\"></img> \n        </div>\n    )\n}\n\nexport default Footer;","/**\n * \n *  File        : Pagination.js\n * \n *  Description : This component of the application handles pagination of the movies list and is implemented into the \n *                Movies.js. It is in its own js file to be used later if needed. \n * \n *  Author      : Phillip Palanca \n * \n *  @param        movies            : array object containing all movies from fetched API query result  \n *  @param        desiredPage       : variable that represents the page that user wants of paginated data\n * \n *  @returns     Array of 10 movies that represents current page user is wants to view\n * \n */\n\nfunction Pagination(movies, desiredPage){\n    var page = desiredPage\n    var moviesPerPage = 10\n    //Find offset for pagination\n    var offset = (page - 1) * moviesPerPage\n   //Slice given movies list by offset and then by 0 and by 10 \n    var paginatedMoviesList = movies.slice(offset).slice(0, moviesPerPage)\n\n    return(paginatedMoviesList)  \n}\nexport default Pagination","import React, {useState} from 'react';\nimport Pagination from './Pagination';\nimport './Movies.css';\n\n/**\n * \n *  File        : Movies.js\n * \n *  Description : This component of the application handles the formating of how the search results from user query is presented.\n *                It will also handle with pulling addition information regarding a specific movie through OMDB API use. This component\n *                is also imported into MoviesSearch.js.\n *\n *  Author      : Phillip Palanca \n * \n *  @param        movies            : array object containing all movies from fetched API query result  \n *  @param        pages             : array object of total number of pages that contain 10 or less movies\n *  @param        currentPage       : variable that is defaulted at 1 \n *  @param        currentPageSetter : setter that sets the curent page that should be displayed\n * \n *  @returns     Object structures shown on web application regarding formating of list of movies and specifc movie details\n * \n * \n */\n\nfunction Movies({movies, pages, currentPage, currentPageSetter}) { \n    const [movieDetails, setMovieDetails] = useState([])\n\n    //The function callAPI() takes in a specific movie and fetches the API results from OMDB API that is then used to display later\n    async function callAPI(specificMovie){\n        const API_KEY = process.env.REACT_APP_API_KEY\n        const URL = \"https://www.omdbapi.com/?t=\" + specificMovie + \"&apikey=\" + API_KEY\n        \n        //Fetch API using URL and log results\n        let response= await fetch(URL)\n        response = await response.json()\n        console.log(response)\n\n        //Check to see if response can be found and is not undefined\n        if(response !== undefined){\n            //Set response to movie details and toggle open movie details popup\n            setMovieDetails(response)\n            document.getElementById(\"movie-Details\").classList.toggle(\"active\")\n            document.getElementById(\"transparent-overlay\").classList.toggle(\"active\")\n        }\n        //If a response can not be found alert the user \n        else{\n            alert(\"Movie details can not be found :(\")\n        }\n    }\n\n    //The function closePopUp() closes the extra Movie Details popup\n    function closePopup(){\n        document.getElementById(\"movie-Details\").classList.toggle(\"active\")\n        document.getElementById(\"transparent-overlay\").classList.toggle(\"active\")\n    }\n\n    return(\n        <div className=\"movies\">\n            <table>\n                <thead>\n                    <tr>\n                        <th><img className=\"search-Image\" src=\"./images/searchResults.png\" alt=\"Sunny Day Movie Search\"></img></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Pagination(movies, currentPage).map(movie => {\n                        //When cycling through the movie check to see if there is a poster or not\n                        if(movie.Poster === \"N/A\"){\n                            //If there is not a poster then replace the use the altPoster.png as the movie's poster in the card\n                            return(<tr key={movie.imdbID}id={movie.imdbID}>\n                                <th>\n                                <div className=\"card\" id={movie.imdbID}>\n                                    <div className=\"body\">\n                                        <div className=\"card-image\">\n                                            <img className=\"poster\" src=\"./images/altPoster.png\" alt=\"No Poster Provided\"></img>      \n                                        </div>\n                                        <div className=\"card-text\">\n                                             <h3>{movie.Title} ({movie.Year})</h3>\n                                             <button className=\"details-button\" id={movie.imdbID} onClick={() => callAPI(movie.Title)}>Click for more details</button>\n                                        </div>\n                                    </div>\n                                </div>\n                               </th>\n                            </tr>   \n                            ) \n                        }\n                        //If there is a poster then just use the movie's poster for the card \n                        return(<tr key={movie.imdbID}>\n                            <th>\n                            <div className=\"card\">\n                                <div className=\"body\">\n                                    <div className=\"card-image\">\n                                        <img className=\"poster\" src={movie.Poster} alt=\"No Poster Provided\"></img>      \n                                    </div>\n                                    <div className=\"card-text\">\n                                         <h3>{movie.Title} ({movie.Year})</h3>\n                                         <button className=\"details-button\" id={movie.imdbID} onClick={() => callAPI(movie.Title)}>Click for more details</button>\n                                    </div>\n                                </div>\n                            </div>\n                           </th>\n                        </tr>   \n                        )        \n                    })}     \n                </tbody>\n            </table>\n            <div>\n                <div className=\"pageNumberLine\">\n                    Page {currentPage} of {pages.length}\n                </div>\n                <nav className=\"pageSelector\">\n                    <ul className=\"pagination\">\n                        {pages.map(number => (\n                            <span key={number} className='page-item'>\n                            <a className='page-Number' onClick={() => currentPageSetter(number)} href='!#'>\n                            {number}\n                            </a>\n                            </span>\n                        ))}\n                    </ul>\n                </nav>\n            </div>\n            <div className=\"movieDetails\">\n                <div className=\"popUp\" id=\"movie-Details\" >\n                    <button data-close-button className=\"close-btn\" onClick={() => closePopup()}>&times;</button>\n                    <img className=\"sunny-smile\" src=\"./images/smileySun.PNG\" alt=\"No Sun Today :(\"></img>    \n                    <h1>{movieDetails.Title}</h1>\n                    Release Date : {movieDetails.Released} <br></br>\n                    Runtime : {movieDetails.Runtime} <br></br>\n                    Genre : {movieDetails.Genre} <br></br>\n                    Director : {movieDetails.Director} <br></br>\n                </div>\n                <div className=\"overlay\" id=\"transparent-overlay\"></div>\n            </div>\n         </div>\n    )\n}\nexport default Movies;","import React, { useState } from 'react';\nimport './MoviesSearch.css';\nimport Movies from './Movies';\n\n/**\n * \n *  File        : MoviesSearch.js\n * \n *  Description : This component of the application takes in a query from the user that will then call the OMDB API for an intial list of movies.\n *                This file is imported within App.js and called within it. \n *\n *  Author      : Phillip Palanca \n * \n *  @returns    Object structures shown on web application regarding querysubmission and Movies return object structure \n * \n */\n\nfunction MoviesSearch(){\n\n    const [query, setQuery] = useState(\"\")\n    const [showMovies,setShowMovies] = useState(false)\n\n    //Constants that are passed and referenced throughout other components\n    const [movies, setMovies] = useState([])\n    const [pages, setPages] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n\n    var totalPages = []\n    var totalResults = 0\n    var allMovies = []\n\n    /**\n     * \n     * The function handleSubmit() works so that after a user inputs a query for a Movie,\n     * it will then call the OMDB api and fetch the results so that it is stored within the application.\n     * It will also then take into account storing only the movies of all pages of the fetched results.\n     * \n     * @param {*} e \n     * \n     */\n    function handleSubmit(e){\n        e.preventDefault()\n        \n        //The fetchMyAPI() fetch the queries results from OMDB API and sets these results to constant values\n        async function fetchMyAPI(){\n            const API_KEY = process.env.REACT_APP_API_KEY\n            let page = 1\n            const URL = \"https://www.omdbapi.com/?s=\" + query + \"&page=\" + page + \"&apikey=\" + API_KEY\n\n            //Calling API and fetch results\n            let response = await fetch(URL)\n            response = await response.json()\n\n            //Check to see if the first results from API call is valid and not undefined or not found\n            if(response.Search !== undefined){\n\n                //If response is found then cycle through each response to pull out only movies\n                response.Search.forEach(movie => {\n                    //Check to see if respone is movie then push it into list of all movies\n                    if(movie.Type === \"movie\"){\n                        allMovies.push(movie) \n                    }\n                })\n\n                totalResults = response.totalResults \n                \n                //Cycle through all results by considering each set of 10 results as a page\n                while(page <= totalResults/10){\n                    page++ //Increment page\n\n                    //Set URL for API fetch so that it consponding with page in cycle \n                    const URL = \"https://www.omdbapi.com/?s=\" + query + \"&page=\" + page + \"&apikey=\" + API_KEY\n\n                    //Call API and fetch results\n                    response = await fetch(URL)\n                    response = await response.json()\n\n                    //Check to see if results from each page of responses is valid \n                    if(response.Search !== undefined){\n                        //Cycle through and grab only the movies that are in each page of responses\n                        response.Search.forEach(movie => {\n                            if(movie.Type === \"movie\"){\n                                allMovies.push(movie)\n                            }\n                        })\n                    }\n                }\n                \n                //Check to see if there are movies from search \n                if(allMovies.length !== 0){\n                    console.log(allMovies) \n                    //Set the movies into a constant variable to be passed through other components of web app\n                    setMovies(allMovies)\n\n                    //Find how many pages there are that can consist of 10 or less movies from all movies list\n                    for (let index = 1; index <= Math.ceil(allMovies.length / 10); index++) {\n                        totalPages.push(index)    \n                    }\n                    //Store pages found previously into constant variable that can be passed through other components \n                    setPages(totalPages)\n                }\n                //If there are no movies that can be found from all pages then alert user\n                else{\n                    alert('Ooops no movies can be found, please try again :)');\n                }\n\n            }\n            //If response from API is undefined and not valid then alert user\n            else{\n                alert('Ooops no movies can be found, please try again :)');\n            }\n        }\n       //Call fetchMyAPI to fetch responses from query\n       fetchMyAPI()\n       //If everything checks out from fetchMyAPI() then movies list is able to show from first page and searchquery clears\n       setShowMovies(true)\n       setCurrentPage(1)\n       setQuery(\"\")       \n    }\n    \n    return(\n        <div className=\"querySearch\"> \n           <form className=\"query-submission\" onSubmit={handleSubmit}>\n                <img className=\"enter-Image\" src=\"./images/enterImage.png\" alt=\"Sunny Day Movie Search\"></img>\n                <input id=\"queryInput\" value={query} onChange={e => setQuery(e.target.value)} required/>\n                <button className=\"search\" >Submit</button>\n           </form>\n           <div className=\"moviesInfo\">\n                {showMovies ? <Movies movies={movies} pages={pages} currentPage={currentPage} currentPageSetter={setCurrentPage}></Movies> : <></>}\n           </div>\n        </div>\n    )\n}\nexport default MoviesSearch;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport MoviesSearch from './components/MoviesSearch';\n\n/**\n * \n *  File        : App.js\n * \n *  Description : This is the main js code for the web application that is dependent on it's strutures. As an overview of app makeup, Header.js \n *                and Footer.js are independent functions and do not function off other components. However, MoviesSearch.js is dependent on  \n *                Movies.js which is then dependent on Pagination.js. \n *\n *  Author      : Phillip Palanca \n * \n *  @returns    Web Application Interface \n * \n */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <MoviesSearch></MoviesSearch>\n      <Footer title=\"2021\"></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}